services:
  # PostgreSQL with TimescaleDB Extension
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: qvp-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=qvp_db
      - POSTGRES_USER=qvp_user
      - POSTGRES_PASSWORD=qvp_secure_password_2024
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qvp_user -d qvp_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - qvp-network

  # Main QVP Application
  qvp-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qvp-platform
    ports:
      - "8050:8050"  # Dash dashboard
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - QVP_ENV=production
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=qvp_db
      - POSTGRES_USER=qvp_user
      - POSTGRES_PASSWORD=qvp_secure_password_2024
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - qvp-network

  # Interactive Dashboard Service
  qvp-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qvp-dashboard
    command: python -m qvp.dashboard.app
    ports:
      - "8051:8050"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - QVP_ENV=production
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=qvp_db
      - POSTGRES_USER=qvp_user
      - POSTGRES_PASSWORD=qvp_secure_password_2024
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      qvp-app:
        condition: service_started
    restart: unless-stopped
    networks:
      - qvp-network

  # Live Trading Simulation Service
  qvp-live:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qvp-live-sim
    command: python -m qvp.live.simulator
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - QVP_ENV=production
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=qvp_db
      - POSTGRES_USER=qvp_user
      - POSTGRES_PASSWORD=qvp_secure_password_2024
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      qvp-app:
        condition: service_started
    restart: unless-stopped
    networks:
      - qvp-network

  # Risk Monitoring Dashboard
  qvp-risk-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qvp-risk-monitor
    command: python -m qvp.dashboard.risk_monitor
    ports:
      - "8052:8050"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - QVP_ENV=production
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=qvp_db
      - POSTGRES_USER=qvp_user
      - POSTGRES_PASSWORD=qvp_secure_password_2024
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      qvp-app:
        condition: service_started
    restart: unless-stopped
    networks:
      - qvp-network

networks:
  qvp-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  qvp-data:
  qvp-logs:
